[{"/Users/aimen/real-time-stuff/front-side/src/index.js":"1","/Users/aimen/real-time-stuff/front-side/src/App.js":"2","/Users/aimen/real-time-stuff/front-side/src/reportWebVitals.js":"3","/Users/aimen/real-time-stuff/front-side/src/global.js":"4","/Users/aimen/real-time-stuff/front-side/src/component/chatView.js":"5","/Users/aimen/real-time-stuff/front-side/src/component/sideBar.js":"6","/Users/aimen/real-time-stuff/front-side/src/component/MessageBubble.js":"7"},{"size":535,"mtime":1651147311753,"results":"8","hashOfConfig":"9"},{"size":930,"mtime":1651372831415,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1651147311754,"results":"11","hashOfConfig":"9"},{"size":125,"mtime":1651148963177,"results":"12","hashOfConfig":"9"},{"size":2018,"mtime":1651335413122,"results":"13","hashOfConfig":"9"},{"size":3446,"mtime":1651444530178,"results":"14","hashOfConfig":"9"},{"size":307,"mtime":1651335751814,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u6o2j7",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aimen/real-time-stuff/front-side/src/index.js",[],[],"/Users/aimen/real-time-stuff/front-side/src/App.js",["40","41","42","43","44"],[],"/Users/aimen/real-time-stuff/front-side/src/reportWebVitals.js",[],[],"/Users/aimen/real-time-stuff/front-side/src/global.js",[],[],"/Users/aimen/real-time-stuff/front-side/src/component/chatView.js",["45","46","47"],[],"import { render } from '@testing-library/react';\nimport React,{useState, useEffect}from 'react';\n\nimport socket from '../global';\nimport './chatView.css';\n\nimport MessageBubble from './MessageBubble'\n\n\n\nfunction ChatView({chat}){\n    const[data, setData] = useState([]);\n    const[inputVal, setInputVal] = useState(\"\");\n    const[cmessage, setcMessage] = useState([]);\n    const[usersConntected, setUsersConntected] = useState([]);\n\n   useEffect(() => {\n\n    socket.on('history', (messages) => setData(messages) );\n   reciveingMessage();\n   }, []);\n\n   useEffect(() => {\n    setData((val) => [...val, cmessage]);\n   }, [cmessage]);\n\n   function reciveingUser(){\n    socket.on(\"sendUser\", (user) => {\n        console.log(user);\n        setUsersConntected(user);\n    });\n   }\n\n   function reciveingMessage(){\n    socket.on('message',  (message) => {\n      setcMessage(message[0]);\n    });\n   }\n\n  function handleSubmit(e) {\n    e.preventDefault(); \n      socket.emit(\"sendMessage\", inputVal);\n    \n  }\n\n    return(\n        <div className='chatview'>\n            <div className='chat-screen'>\n                {data.map((val) => (\n                    <MessageBubble key={val._id}  message={val.quotes} user={val.user} />\n                    ))}\n                \n            </div>\n\n        <form >\n            <div className='form-container'>\n                <div className=\"input-container\">\n                    <input \n                       \n                        onChange={(evt) => { setInputVal(evt.target.value) }}\n                        type=\"text\"\n                        name='quotes' \n                        placeholder=\"type your message...\">\n                    </input>\n                \n                </div>\n                <div className='button-container'>\n                <button type='submit' onClick={(e) => handleSubmit(e)}>Submit</button>\n                   \n                </div>\n            </div>\n        </form>\n            \n           \n        </div>\n    );\n    \n}\n\nexport default ChatView;",[],"/Users/aimen/real-time-stuff/front-side/src/component/sideBar.js",["48","49","50","51","52"],[],"import React,{useState, useEffect}from 'react';\nimport './sideBar.css';\nimport img from '../img.png';\nimport socket from '../global';\n\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n\nfunction SideBar() {\n    const [isVisible, setVisible] = useState(true);\n    const[userCount, setUserCount] = useState(0);\n    const[usersConntected, setUsersConntected] = useState([]);\n    const[usersDisConntected, setUsersDisConntected] = useState(\"\");\n    const[Conntected, setConntected] = useState(\"\");\n    let initialState = null;\n    let array = [];\n\n    useEffect(() => {\n        socket.on(\"sendUserCount\", (value) => {\n            setUserCount(value);\n            setVisible(!isVisible);\n        });\n        socket.on(\"sendUser\", (user) => {\n            initialState = user;\n            console.log(user);\n            setUsersConntected(initialState);\n        });\n            console.log(array);\n    });\n\n    useEffect(() => {\n        connectUser();\n        \n    }, []);\n    \n\n    useEffect(() => {\n        disconnectedUser();\n        setUsersConntected((val) => [...val, usersDisConntected + \" has disconneted\"]);\n    },[usersDisConntected] );\n\n    function connectUser() {\n        socket.on(\"sendUser2\", (user) => {\n            initialState = user;\n            setConntected(user);\n        });\n    }\n\n    function disconnectedUser(){\n        socket.on(\"disconnectedUser\", (user) => {\n            initialState = user;\n            setUsersDisConntected(user);\n            });\n    }\n\n\n    function timeout(number) {\n        return new Promise( res => setTimeout(res, number));\n    }\n    \n\n    return (\n        <div className='sidebar'>\n                <div className=\"img-container\">\n                    <img src={img} alt='img' className='img'/>\n                    <p>big</p>\n                 </div>\n\n                 <div className='pressence-container'>{userCount === null ? 0 : userCount} Users Connected</div>\n                 <motion.div\n                    style={{\n                    width: 75,\n                    height: 75,\n                    borderRadius: 30,\n                    backgroundColor: \"rgba(255,255,255,0.5)\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\"\n                    }}\n                    onTap={() => setVisible(!isVisible)}\n                >\n                <AnimatePresence>\n                    {isVisible && (\n                        <motion.div\n                            style={{\n                            width: 40,\n                            height: 40,\n                            borderRadius: 15,\n                            backgroundColor: \"#fff\"\n                            }}\n                            initial={{ opacity: 0, scale: 0.75 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            exit={{ opacity: 0, scale: 0 }}\n                        />\n                    )}\n                </AnimatePresence>\n                </motion.div>\n\n                <div className='notification-container'>\n                    <p>Notifcations</p>\n                    {usersConntected === null ? <div/> : \n                    usersConntected.map((index) => (\n                        <p>{index}</p>\n                    ))\n                    } has Connected\n                </div>\n            \n        </div>\n    );\n}\n\nexport default SideBar;","/Users/aimen/real-time-stuff/front-side/src/component/MessageBubble.js",[],[],{"ruleId":"53","severity":1,"message":"54","line":12,"column":10,"nodeType":"55","messageId":"56","endLine":12,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":12,"column":19,"nodeType":"55","messageId":"56","endLine":12,"endColumn":29},{"ruleId":"53","severity":1,"message":"58","line":14,"column":7,"nodeType":"55","messageId":"56","endLine":14,"endColumn":12},{"ruleId":"59","severity":1,"message":"60","line":19,"column":20,"nodeType":"61","messageId":"62","endLine":19,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":25,"column":6,"nodeType":"65","endLine":25,"endColumn":8,"suggestions":"66"},{"ruleId":"53","severity":1,"message":"67","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":16},{"ruleId":"53","severity":1,"message":"68","line":15,"column":11,"nodeType":"55","messageId":"56","endLine":15,"endColumn":26},{"ruleId":"53","severity":1,"message":"69","line":27,"column":13,"nodeType":"55","messageId":"56","endLine":27,"endColumn":26},{"ruleId":"53","severity":1,"message":"70","line":14,"column":11,"nodeType":"55","messageId":"56","endLine":14,"endColumn":21},{"ruleId":"63","severity":1,"message":"71","line":24,"column":28,"nodeType":"55","endLine":24,"endColumn":32},{"ruleId":"63","severity":1,"message":"72","line":34,"column":8,"nodeType":"65","endLine":34,"endColumn":10,"suggestions":"73"},{"ruleId":"63","severity":1,"message":"74","line":40,"column":7,"nodeType":"65","endLine":40,"endColumn":27,"suggestions":"75"},{"ruleId":"53","severity":1,"message":"76","line":57,"column":14,"nodeType":"55","messageId":"56","endLine":57,"endColumn":21},"no-unused-vars","'newData' is assigned a value but never used.","Identifier","unusedVar","'setNewData' is assigned a value but never used.","'array' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'render' is defined but never used.","'usersConntected' is assigned a value but never used.","'reciveingUser' is defined but never used.","'Conntected' is assigned a value but never used.","Assignments to the 'initialState' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'connectUser'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'disconnectedUser'. Either include it or remove the dependency array.",["79"],"'timeout' is defined but never used.",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [data]",{"range":"86","text":"87"},"Update the dependencies array to be: [connectUser]",{"range":"88","text":"89"},"Update the dependencies array to be: [disconnectedUser, usersDisConntected]",{"range":"90","text":"91"},[547,549],"[data]",[969,971],"[connectUser]",[1124,1144],"[disconnectedUser, usersDisConntected]"]