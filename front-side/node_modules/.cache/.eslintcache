[{"/Users/aimen/real-time-stuff/front-side/src/index.js":"1","/Users/aimen/real-time-stuff/front-side/src/App.js":"2","/Users/aimen/real-time-stuff/front-side/src/reportWebVitals.js":"3","/Users/aimen/real-time-stuff/front-side/src/global.js":"4","/Users/aimen/real-time-stuff/front-side/src/component/chatView.js":"5","/Users/aimen/real-time-stuff/front-side/src/component/sideBar.js":"6","/Users/aimen/real-time-stuff/front-side/src/component/MessageBubble.js":"7"},{"size":495,"mtime":1651850730373,"results":"8","hashOfConfig":"9"},{"size":781,"mtime":1651693439104,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1651147311754,"results":"11","hashOfConfig":"9"},{"size":125,"mtime":1651148963177,"results":"12","hashOfConfig":"9"},{"size":2438,"mtime":1651856515181,"results":"13","hashOfConfig":"9"},{"size":3807,"mtime":1651856621977,"results":"14","hashOfConfig":"9"},{"size":307,"mtime":1651335751814,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1u6o2j7",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aimen/real-time-stuff/front-side/src/index.js",[],[],[],"/Users/aimen/real-time-stuff/front-side/src/App.js",["43","44","45","46"],[],"import React from \"react\";\nimport './App.css';\n\nimport socket from './global'\n\nimport SideBar from './component/sideBar';\nimport ChatView from \"./component/chatView\";\n\n\nfunction App() {\n  const [data, setData] = React.useState([]);\n  const [newData, setNewData] = React.useState([]);\n  \n  let array = [];\n  React.useEffect(() => {\n\n    window.addEventListener('unload', handleTabClosing)\n    \n  }, []);\n\n  \n  const handleTabClosing = () => {\n    var huil = 0;\n    console.log(\"hbhjbj\");\n    socket.emit('sendUserCount', huil);\n    socket.emit('disconnect');\n    socket.close();\n  }\n\n  \n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n      <SideBar></SideBar>\n      <ChatView chat={data}></ChatView>\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n\n",[],"/Users/aimen/real-time-stuff/front-side/src/reportWebVitals.js",[],[],"/Users/aimen/real-time-stuff/front-side/src/global.js",[],[],"/Users/aimen/real-time-stuff/front-side/src/component/chatView.js",["47","48","49"],[],"import { render } from '@testing-library/react';\nimport React,{useState, useEffect, useRef}from 'react';\n\nimport socket from '../global';\nimport './chatView.css';\n\nimport MessageBubble from './MessageBubble'\n\n\n\nfunction ChatView({chat}){\n    const messagesEndRef = useRef(null); \n    const[data, setData] = useState([]);\n    const[inputVal, setInputVal] = useState(\"\");\n    const[cmessage, setcMessage] = useState([]);\n    const[usersConntected, setUsersConntected] = useState([]);\n\n   useEffect(() => {\n    socket.on('history', (messages) => setData(messages) );\n   reciveingMessage();\n   scrollToBottom();\n   }, []);\n\n   useEffect(() => {\n    setData((val) => [...val, cmessage]);\n    scrollToBottom();\n   }, [cmessage]);\n\n   function reciveingUser(){\n    socket.on(\"sendUser\", (user) => {\n        console.log(user);\n        setUsersConntected(user);\n    });\n   }\n\n   const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n  }\n\n   function reciveingMessage(){\n    socket.on('message',  (message) => {\n      setcMessage(message[0]);\n    });\n   }\n\n  function handleSubmit(e) {\n    e.preventDefault(); \n      socket.emit(\"sendMessage\", inputVal);\n    \n  }\n\n  const AlwaysScrollToBottom = () => {\n    const elementRef = useRef();\n    useEffect(() => elementRef.current.scrollIntoView({ behavior: \"smooth\" }));\n    return <div ref={elementRef} />;\n  };\n\n    return(\n        <div className='chatview'>\n            <div className='chat-screen'>\n                {data.map((val) => (\n                    <MessageBubble  key={val._id}  message={val.quotes} user={val.user} />\n                    ))}\n                    <AlwaysScrollToBottom/>\n            </div>\n        <form >\n            <div className='form-container'>\n                <div className=\"input-container\">\n                    <input \n                       \n                        onChange={(evt) => { setInputVal(evt.target.value) }}\n                        type=\"text\"\n                        name='quotes' \n                        placeholder=\"type your message...\">\n                    </input>\n                \n                </div>\n                <div className='button-container'>\n                <button type='submit' onClick={(e) => handleSubmit(e)}>Submit</button>\n                   \n                </div>\n            </div>\n        </form>\n            \n           \n        </div>\n    );\n    \n}\n\nexport default ChatView;",[],"/Users/aimen/real-time-stuff/front-side/src/component/sideBar.js",["50","51"],[],"import React,{useState, useEffect, useRef}from 'react';\nimport './sideBar.css';\nimport img from '../img.png';\nimport socket from '../global';\n\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n\nfunction SideBar() {\n    const messagesEndRef = useRef(null);\n    const [isVisible, setVisible] = useState(true);\n    const[userCount, setUserCount] = useState(0);\n    const[usersConntected, setUsersConntected] = useState([]);\n    let initialState = null;\n\n    useEffect(() => {\n        usersCount();\n        scrollToBottom();\n    }, []);\n\n    useEffect(() => {\n        scrollToBottom();\n        connectUser();\n    }, []);\n\n    useEffect(() => {\n        scrollToBottom();\n        disconnectedUser();\n        \n    }, []);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n      }\n    \n    function connectUser() {\n        socket.on(\"sendUser2\", (user) => {\n            initialState = user;\n            setUsersConntected((val) => [...val, initialState + \" has conneted\"]);\n        },[initialState]);\n         setVisible(false);\n         timeout(1000);\n         setVisible(true);\n    }\n\n    function disconnectedUser(){\n        socket.on(\"disconnectedUser\", (user) => {\n            setUsersConntected((val) => [...val, user + \" has DisConnected\"]);\n            initialState = user;\n        \n            });\n    }\n\n    function usersCount(){\n        socket.on(\"sendUserCount\", (value) => {\n            setUserCount(value);\n            //setVisible(!isVisible);\n         });\n         console.log('i fire once');\n    }\n    \n    const AlwaysScrollToBottom = () => {\n        const elementRef = useRef();\n        useEffect(() => elementRef.current.scrollIntoView({ behavior: \"smooth\" }));\n        return <div ref={elementRef} />;\n      };\n\n    function timeout(number) {\n        return new Promise( res => setTimeout(res, number));\n    }\n    \n\n    return (\n        <div className='sidebar'>\n                <div className=\"img-container\">\n                    <img src={img} alt='img' className='img'/>\n                    <p>big</p>\n                 </div>\n\n                 <div className='pressence-container'>{userCount === null ? 0 : userCount} Users Connected</div>\n                <AnimatePresence>\n                    {isVisible && (\n                        <motion.div\n                        onTap={() => setVisible(!isVisible)}\n                            style={{\n                            width: 40,\n                            height: 40,\n                            borderRadius: 15,\n                            backgroundColor: \"#fff\"\n                            }}\n                            initial={{ opacity: 0, scale: 0.75 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            exit={{ opacity: 0, scale: 0 }}\n                        />\n                    )}\n                </AnimatePresence>\n\n                <div className='notification-container'>\n                    <p>Notifcations</p>\n                    {usersConntected === null ? <div/> : \n                    usersConntected.map((index) => (index.includes('DisConnected') ?\n                        <div\n                        style={{\n                        marginTop: \"10px\",\n                        backgroundColor: \"#f28787\",\n                        }}\n                        >{index}</div>\n                        :\n                        <div\n                        style={{\n                        marginTop: \"10px\",\n                        backgroundColor: \"rgb(255, 217, 254)\",\n                        }}\n                        >{index}</div>\n\n                    ))\n                    }\n                    <AlwaysScrollToBottom />\n                </div>\n            \n        </div>\n    );\n}\n\nexport default SideBar;","/Users/aimen/real-time-stuff/front-side/src/component/MessageBubble.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":11,"column":16,"nodeType":"54","messageId":"55","endLine":11,"endColumn":23},{"ruleId":"52","severity":1,"message":"56","line":12,"column":10,"nodeType":"54","messageId":"55","endLine":12,"endColumn":17},{"ruleId":"52","severity":1,"message":"57","line":12,"column":19,"nodeType":"54","messageId":"55","endLine":12,"endColumn":29},{"ruleId":"52","severity":1,"message":"58","line":14,"column":7,"nodeType":"54","messageId":"55","endLine":14,"endColumn":12},{"ruleId":"52","severity":1,"message":"59","line":1,"column":10,"nodeType":"54","messageId":"55","endLine":1,"endColumn":16},{"ruleId":"52","severity":1,"message":"60","line":16,"column":11,"nodeType":"54","messageId":"55","endLine":16,"endColumn":26},{"ruleId":"52","severity":1,"message":"61","line":29,"column":13,"nodeType":"54","messageId":"55","endLine":29,"endColumn":26},{"ruleId":"62","severity":1,"message":"63","line":24,"column":8,"nodeType":"64","endLine":24,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":30,"column":8,"nodeType":"64","endLine":30,"endColumn":10,"suggestions":"67"},"no-unused-vars","'setData' is assigned a value but never used.","Identifier","unusedVar","'newData' is assigned a value but never used.","'setNewData' is assigned a value but never used.","'array' is assigned a value but never used.","'render' is defined but never used.","'usersConntected' is assigned a value but never used.","'reciveingUser' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'connectUser'. Either include it or remove the dependency array.","ArrayExpression",["68"],"React Hook useEffect has a missing dependency: 'disconnectedUser'. Either include it or remove the dependency array.",["69"],{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [connectUser]",{"range":"74","text":"75"},"Update the dependencies array to be: [disconnectedUser]",{"range":"76","text":"77"},[620,622],"[connectUser]",[718,720],"[disconnectedUser]"]